+var q_table: [][][][][][][][][][]float
+var x_num: int :: 10
+var y_num: int :: 10
+class Learn()
	var game: \game@Game
	
	+var traincount: int
	+var flag_p: int
	+var filename: int
	var count: int
	var time: int
	var move_p: int
	var move_flag_e: int
	var e_win: int
	var p_win: int
	var e_point: int
	var p_point: int
	var next_m: int
	var target_pos_e: int
	var next_s: int
	*func ctor()
		
		do me.count :: 1
		do @q_table :: #[4, 4, 4, 4, 4, 4, 4, 4, 9, 2]float
		do me.game :: #\game@Game
	end func
	+func mainloop()
		do me.time :+ 1
		if(me.traincount >= me.count)
			do me.game.update()
			do me.learn_E()
			do me.learn_P()
			do me.init()
		else
			do me.game.draw()
			do me.game.update()
			do me.learn_E()
			do me.learn_P()
			do me.init()
		end if
	end func
	+func init()
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		if(\main@enemy.hp <= 0)
			do me.p_win :+ 1
		end if
		if(\main@player.hp <= 0)
			do me.e_win :+ 1
		end if
		
		if(\main@enemy.hp <= 0 | \main@player.hp <= 0)
			do me.move_flag_e :: 0
			if(me.traincount = me.count)
				do \main@resulttxt :~ "\nかかった時間は\{(lib@sysTime() $ float - \main@start_time $ float) / 1000.0 / 60.0}分でした。\n"
			end if
			do me.p_point :+ 10 - \main@enemy.hp
			do me.e_point :+ 10 - \main@player.hp
			do dbg@print("勝率:\{me.e_win $ float / me.count $ float * 100.0}%, 回数:\{me.count}, 勝利数:(\{me.e_win}:\{me.p_win}), 体力:(\{\main@enemy.hp}:\{\main@player.hp}), ポイント:(\{me.e_point},\{me.p_point})\n")
			do \main@resulttxt :~ "勝率:\{me.e_win $ float / me.count $ float * 100.0}%, 回数:\{me.count}, 勝利数:(\{me.e_win}:\{me.p_win}), 体力:(\{\main@enemy.hp}:\{\main@player.hp}), ポイント:(\{me.e_point},\{me.p_point}),  t=\{(lib@sysTime() $ float - \main@start_time $ float) / 1000.0 / 60.0}分\n"
			if(me.count % 10 = 0)
				var h: file@Writer :: file@makeWriter("4_now_data.txt", true)
				do h.writeStr("勝率:\{me.e_win $ float / me.count $ float * 100.0}%, 回数:\{me.count}, 勝利数:(\{me.e_win}:\{me.p_win}), 体力:(\{\main@enemy.hp}:\{\main@player.hp}), ポイント:(\{me.e_point},\{me.p_point}),  t=\{(lib@sysTime() $ float - \main@start_time $ float) / 1000.0 / 60.0}分\n")
				do h.fin()
			end if
			
			do me.game.init()
			var savecount: int
			if(me.traincount <= 100)
				do savecount :: 10
			elif(me.traincount <= 1000)
				do savecount :: 100
			elif(me.traincount <= 3000)
				do savecount :: 500
			else
				do savecount :: 1000
			end if
			
			if(me.count % savecount = 0)
				var handle: file@Writer :: file@makeWriter("4_q_table_\{me.filename + me.count}.txt", false)
				for i1(0, 3)
					for i2(0, 3)
						for i3(0, 3)
							for i4(0, 3)
								for i5(0, 3)
									for i6(0, 3)
										for i7(0, 3)
											for i8(0, 3)
												for i9(0, 8)
													for i10(0, 1)
														do handle.writeFloat(@q_table[i1][i2][i3][i4][i5][i6][i7][i8][i9][i10]) {小数を書き込む}
														do handle.writeChar(',')
													end for
												end for
											end for
										end for
									end for
								end for
							end for
						end for
					end for
				end for
				do handle.fin()
				do \main@resulttxt :~ "保存しました。 t=\{(lib@sysTime() $ float - \main@start_time $ float) / 1000.0 / 60.0}分\n"
				do dbg@print("保存しました\n")
			end if
			do me.count :+ 1
		end if
	end func
	
	+func get_reward_E(ep: int, pp: int, bep: int, bpp: int): float
		if(ep = bpp)
			ret - 77.0
		elif(bep = pp)
			ret 55.0
		end if
		ret - 1.0
	end func
	
	+func learn_E()
		
		var q_max: float :: -999.9
		var q_max_next: float :: -999.9
		var r: float
		var next_move: int
		var next_shoot: int
		
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;今の状態
		var ex: float :: \main@enemy.x + \main@enemy.width / 2.0
		var ey: float :: \main@enemy.y + \main@enemy.height / 2.0
		var bpx: float :: -9999999.9
		var bpy: float :: -9999999.9
		do \main@bulletList_P.head()
		while(!\main@bulletList_P.term())
			var bp: \bullet@Bullet :: \main@bulletList_P.get()
			do bpx :: bp.x + bp.width / 2.0
			do bpy :: bp.y + bp.height / 2.0
			do \main@bulletList_P.next()
		end while
		var bex: float :: -9999999.9
		var bey: float :: -9999999.9
		do \main@bulletList_E.head()
		while(!\main@bulletList_E.term())
			var be: \bullet@Bullet :: \main@bulletList_E.get()
			do bex :: be.x + be.width / 2.0
			do bey :: be.y + be.height / 2.0
			do \main@bulletList_E.next()
		end while
		var px: float :: \main@player.x + \main@player.width / 2.0
		var py: float :: \main@player.y + \main@player.height / 2.0
		
		var s: []int :: #[8]int
		var s_p: int :: me.sensor(ex, ey, px, py)
		var s_bp: int :: me.sensor(ex, ey, bpx, bpy)
		
		var wall_x: int :: me.search_wall(ex, ey) % 7
		var wall_y: int :: (me.search_wall(ex, ey) - wall_x) / 7
		
		do s[wall_x] :: 3
		do s[wall_y] :: 3
		
		if(s_p > 0)
			do s[s_p] :: 1
		end if
		if(s_bp > 0)
			do s[s_bp] :: 2
		end if
		
		
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;次の状態
		
		var _px: float :: \main@player.x + \main@player.width / 2.0 + \main@player.veloX
		var _py: float :: \main@player.y + \main@player.height / 2.0 + \main@player.veloY
		var _bpx: float :: -9999999.9
		var _bpy: float :: -9999999.9
		do \main@bulletList_P.head()
		while(!\main@bulletList_P.term())
			var bp: \bullet@Bullet :: \main@bulletList_P.get()
			do _bpx :: bp.x + bp.width / 2.0 + bp.veloX
			do _bpy :: bp.y + bp.height / 2.0 + bp.veloY
			do \main@bulletList_P.next()
		end while
		var _bex: float :: -9999999.9
		var _bey: float :: -9999999.9
		do \main@bulletList_E.head()
		while(!\main@bulletList_E.term())
			var be: \bullet@Bullet :: \main@bulletList_E.get()
			do _bex :: be.x + be.width / 2.0 + be.veloX
			do _bey :: be.y + be.height / 2.0 + be.veloY
			do \main@bulletList_E.next()
		end while
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;探索
		for next_move2(0, 8)
			
			var _ex: float :: ex
			var _ey: float :: ey
			do me.get_next_xy(&_ex, &_ey, next_move2)
			for next_shoot2(0, 1)
				if(^\main@bulletList_E = 0 & next_move2 <> 8 & next_shoot2 = 1)
					do _bex :: _ex
					do _bey :: _ey
					do me.get_next_xy(&_bex, &_bey, next_move2)
				end if
				var _s: []int :: #[8]int
				var _s_p: int :: me.sensor(_ex, _ey, _px, _py)
				var _s_bp: int :: me.sensor(_ex, _ey, _bpx, _bpy)
				
				var _wall_x: int :: me.search_wall(_ex, _ey) % 7
				var _wall_y: int :: (me.search_wall(_ex, _ey) - _wall_x) / 7
				do _s[_wall_x] :: 3
				do _s[_wall_y] :: 3
				
				if(_s_p > 0)
					do _s[_s_p] :: 1
				end if
				if(_s_bp > 0)
					do _s[_s_bp] :: 2
				end if
				
				
				;次のQ値最大を求める
				
				for move(0, 8)
					for shoot(0, 1)
						if(@q_table[_s[0]][_s[1]][_s[2]][_s[3]][_s[4]][_s[5]][_s[6]][_s[7]][move][shoot] > q_max_next)
							do q_max_next :: @q_table[_s[0]][_s[1]][_s[2]][_s[3]][_s[4]][_s[5]][_s[6]][_s[7]][move][shoot]
						end if
					end for
				end for
				
				;Q値の更新
				var eta: float :: 0.2
				var gamma: float :: 0.8
				do r :: me.get_reward(_ex, _ey, _bex, _bey, _px, _py, _bpx, _bpy)
				
				if(me.time % 100 = 0)
					;do dbg@print("t:\{me.time},r:\{r}\n")
				end if
				do @q_table[s[0]][s[1]][s[2]][s[3]][s[4]][s[5]][s[6]][s[7]][next_move2][next_shoot2] :: @q_table[s[0]][s[1]][s[2]][s[3]][s[4]][s[5]][s[6]][s[7]][next_move2][next_shoot2] * (1.0 - eta) + eta * (r + gamma * q_max_next)
				
			end for
		end for
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		
		;Q値最大の行動を選ぶ
		
		for move(0, 8)
			for shoot(0, 1)
				if(@q_table[s[0]][s[1]][s[2]][s[3]][s[4]][s[5]][s[6]][s[7]][move][shoot] > q_max)
					do q_max :: @q_table[s[0]][s[1]][s[2]][s[3]][s[4]][s[5]][s[6]][s[7]][move][shoot]
					
					if(q_max = 0.0 | (me.count <= (me.traincount $ float * 0.2) $ int & me.count % 2 = 0))
						if(me.time %lib@rnd(1, 30) = 0)
							do me.next_m :: lib@rnd(0, 8)
							do me.next_s :: lib@rnd(0, 1)
						end if
						
						
					else
						do me.next_m :: move
						do me.next_s :: shoot
					end if
					
				end if
			end for
		end for
		
		
		
		
		if(me.time % 10 = 0)
			
			;do dbg@print("\{me.sensor(ex, ey, px, py)}\n")
			;	do dbg@print("m:\{me.next_m},s:\{me.next_s},t:\{me.time},q:\{q_max}\n")
		end if
		
		;行動の実行
		do \main@enemy.play(me.next_m, me.next_s)
	end func
	
	;;;;;;;;;;;;;;;;;;;;;絶対座標の代わりに、センサーで一番近い（範囲付きで2つ以上もあり）壁を判定する。斜めはあり得ないため、上下左右のみ。
	func search_wall(ex: float, ey: float): int
		var r_dist: float :: \main@WIDTH - ex
		var d_dist: float :: \main@HEIGHT - ey
		var flag: int
		if(ex < r_dist)
			;右寄りにある
			do flag :+ 6
		else
			do flag :+ 2
		end if
		if(ey < d_dist)
			do flag :+ 0 * 7
		else
			do flag :+ 4 * 7
		end if
		
		ret flag
		;位置を四分割している。プレイヤー、プレイヤーの弾を優先し、壁が判定されていない分異なる環境と認識されると思う。
	end func
	
	
	func sensor(ex: float, ey: float, x: float, y: float): int
		var ty1: float :: -(x - ex) + ey
		var ty3: float :: (x - ex) + ey
		var ty5: float :: -(x - ex) + ey
		var ty7: float :: (x - ex) + ey
		if(x = -9999999.9 | y = -9999999.9)
			ret - 1
		end if
		if((ex - x).abs() < 120.0 & y < ey)
			ret 0
		elif((ty1 - y).abs() < 120.0 & ex < x)
			ret 1
		elif((ey - y).abs() < 120.0 & ex < x)
			ret 2
		elif((ty3 - y).abs() < 120.0 & ey < y)
			ret 3
		elif((ex - x).abs() < 120.0 & ey < y)
			ret 4
		elif((ty5 - y).abs() < 120.0 & ey < y)
			ret 5
		elif((ey - y).abs() < 120.0 & ex > x)
			ret 6
		elif((ty7 - y).abs() < 120.0 & ey > y)
			ret 7
		else
			ret - 1
		end if
	end func
	func get_next_xy(x: &float, y: &float, move: int): int
		
		var v: float :: 15.0
		switch(move)
		case 0
			do y :- v
		case 1
			do x :+ v
			do y :- v
		case 2
			do x :+ v
		case 3
			do x :+ v
			do y :+ v
		case 4
			do y :+ v
		case 5
			do x :- v
			do y :+ v
		case 6
			do x :- v
		case 7
			do x :- v
			do y :- v
		case 8
		end switch
		if(x < 0.0)
			do x :: 0.0
		end if
		if(x > \main@WIDTH)
			do x :: \main@WIDTH
		end if
		if(y < 0.0)
			do y :: 0.0
		end if
		if(y > \main@HEIGHT)
			do y :: \main@HEIGHT
		end if
	end func
	func get_reward(ex: float, ey: float, bex: float, bey: float, px: float, py: float, bpx: float, bpy: float): float
		if((ex - bpx).abs() < 50.0 + 25.0 + 15.0& (ey - bpy).abs() < 50.0 + 25.0 + 15.0)
			ret - 250.0
		end if
		if((px - bex).abs() < 50.0 + 25.0 + 15.0 & (py - bey).abs() < 50.0 + 25.0 + 15.0)
			ret 100.0
		end if
		;壁際にいるとき
		if(ex < 77.7 | (\main@WIDTH - ex) < 77.7 | ey < 77.7 | (\main@HEIGHT - ey) < 77.7)
			ret - 33.3
		end if
		ret - 1.0
	end func
	
	
	
	
	
	
	
	
	
	
	
	
	+func enemy_next_pos(ep: int, move: int): int
		var x: int :: ep % @y_num
		var y: int :: (ep - x) / @y_num
		switch(move)
		case 0
			do y :- 1
		case 1
			do x :+ 1
			do y :- 1
		case 2
			do x :+ 1
		case 3
			do x :+ 1
			do y :+ 1
		case 4
			do y :+ 1
		case 5
			do x :- 1
			do y :+ 1
		case 6
			do x :- 1
		case 7
			do x :- 1
			do y :- 1
		case 8
		end switch
		
		if(x < 0)
			do x :: 0
		elif(x > @x_num - 1)
			do x :: @x_num - 1
		end if
		if(y < 0)
			do y :: 0
		elif(y > @y_num - 1)
			do y :: @y_num - 1
		end if
		
		ret x + y * @y_num
	end func
	+func enemy_move_to_pos(next_pos: int): int
		var ep: int :: me.get_next_pos(\main@enemy.x + \main@enemy.width / 2.0, \main@enemy.y + \main@enemy.height / 2.0, 8)
		if(ep <> next_pos)
			do me.move_flag_e :: 1
		end if
		
		var x: int :: next_pos % @y_num
		var y: int :: (next_pos - x) / @y_num
		var flag: int
		var ex: float :: \main@enemy.x + \main@enemy.width / 2.0
		var ey: float :: \main@enemy.y + \main@enemy.height / 2.0
		var X: float :: \main@WIDTH $ float / @x_num $ float * x $ float + \main@WIDTH $ float / @x_num $ float / 2.0
		var Y: float :: \main@HEIGHT $ float / @y_num $ float * y $ float + \main@HEIGHT $ float / @y_num $ float / 2.0
		
		if(ex < X - 15.0 & ey < Y - 15.0)
			do flag :: 3
		elif(ex > X + 15.0 & ey > Y + 15.0)
			do flag :: 7
		elif(ex < X - 15.0 & ey > Y + 15.0)
			do flag :: 1
		elif(ex > X + 15.0 & ey < Y - 15.0)
			do flag :: 5
		elif(ex > X + 15.0)
			do flag :: 6
		elif(ex < X - 15.0)
			do flag :: 2
		elif(ey > Y + 15.0)
			do flag :: 0
		elif(ey < Y - 15.0)
			do flag :: 4
		else
			do me.move_flag_e :: 0
			do flag :: 8
		end if
		{if(me.time % 500 = 0)
			do dbg@print("x:\{x},y:\{y},next_pos:\{next_pos},time:\{me.time},flag_e:\{me.move_flag_e},flag:\{flag}\n")
		end if}
		ret flag
	end func
	
	+func get_next_pos(x: float, y: float, move: int): int
		var width: float :: \main@WIDTH / @x_num $ float
		var height: float :: \main@HEIGHT / @y_num $ float
		
		var v: float :: 15.0
		switch(move)
		case 0
			do y :- v
		case 1
			do x :+ v
			do y :- v
		case 2
			do x :+ v
		case 3
			do x :+ v
			do y :+ v
		case 4
			do y :+ v
		case 5
			do x :- v
			do y :+ v
		case 6
			do x :- v
		case 7
			do x :- v
			do y :- v
		case 8
		end switch
		if(x < 0.0)
			do x :: 0.0
		end if
		if(x > \main@WIDTH)
			do x :: \main@WIDTH
		end if
		if(y < 0.0)
			do y :: 0.0
		end if
		if(y > \main@HEIGHT)
			do y :: \main@HEIGHT
		end if
		for Y(0, @y_num - 1)
			for X(0, @x_num - 1)
				if(x >= X $ float * width & x <= (X $ float + 1.0) * width & y >= Y $ float * height & y <= (Y $ float + 1.0) * height)
					ret X + Y * @y_num
				end if
			end for
		end for
	end func
	+func learn_P()
		
		var shoot: int
		switch(me.flag_p)
		case 1
			;ランダムAI
			if(me.time %lib@rnd(1, 30) = 0)
				do me.move_p :: lib@rnd(0, 8)
			end if
			do shoot :: lib@rnd(0, 1)
		case 2
			;敵の方向を撃ち、敵の弾をよけるAI
			do shoot :: lib@rnd(0, 1)
			;敵の方向へ弾を撃つ
			var p_pos: int :: me.get_next_pos(\main@player.x, \main@player.y, 8)
			var px: int :: p_pos % @y_num
			var py: int :: (p_pos - px) / @y_num
			var e_pos: int :: me.get_next_pos(\main@enemy.x, \main@enemy.y, 8)
			var ex: int :: e_pos % @y_num
			var ey: int :: (e_pos - ex) / @y_num
			if(px = ex)
				if(lib@rnd(1, 100) <= 50)
					do me.move_p :: 0
				else
					do me.move_p :: 4
				end if
			elif(py = ey)
				if(lib@rnd(1, 100) <= 50)
					do me.move_p :: 2
				else
					do me.move_p :: 6
				end if
			elif((px > ex & py > ey) | (px < ex & py < ey))
				if(lib@rnd(1, 100) <= 50)
					do me.move_p :: 3
				else
					do me.move_p :: 7
				end if
			elif((px > ex & py < ey) | (px < ex & py > ey))
				if(lib@rnd(1, 100) <= 50)
					do me.move_p :: 1
				else
					do me.move_p :: 5
				end if
			end if
			;敵の弾を避ける(こっちを敵に弾を当てるより優先するから下に書いている。)
			do \main@bulletList_E.head()
			while(!\main@bulletList_E.term())
				var be: \bullet@Bullet :: \main@bulletList_E.get()
				var be_pos: int :: me.get_next_pos(be.x, be.y, 8)
				var bex: int :: be_pos % @y_num
				var bey: int :: (be_pos - bex) / @y_num
				if(px = bex & (be.flag = 4 | be.flag = 0))
					if(px = @x_num - 1)
						do me.move_p :: 6
					else
						do me.move_p :: 2
					end if
				elif(py = bey & (be.flag = 2 | be.flag = 6))
					if(py = @y_num - 1)
						do me.move_p :: 0
					else
						do me.move_p :: 4
					end if
				elif(((px > bex & py > bey) & be.flag = 3) | ((px < ex & py < ey) & be.flag = 7) | ((px > bex & py < bey) & be.flag = 1) | ((px < bex & py > bey) & be.flag = 5))
					if(px = @x_num - 1)
						do me.move_p :: 6
					else
						do me.move_p :: 2
					end if
				end if
				do \main@bulletList_E.next()
			end while
		case 3
			var bpx: float :: -9999999.9
			var bpy: float :: -9999999.9
			do \main@bulletList_P.head()
			while(!\main@bulletList_P.term())
				var bp: \bullet@Bullet :: \main@bulletList_P.get()
				do bpx :: bp.x + bp.width / 2.0
				do bpy :: bp.y + bp.height / 2.0
				do \main@bulletList_P.next()
			end while
			var bex: float :: -9999999.9
			var bey: float :: -9999999.9
			do \main@bulletList_E.head()
			while(!\main@bulletList_E.term())
				var be: \bullet@Bullet :: \main@bulletList_E.get()
				do bex :: be.x + be.width / 2.0
				do bey :: be.y + be.height / 2.0
				do \main@bulletList_E.next()
			end while
			
			do \main@p_ai.control(\main@player.x + \main@player.width / 2.0, \main@player.y + \main@player.height / 2.0, bpx, bpy, \main@enemy.x + \main@enemy.width / 2.0, \main@enemy.y + \main@enemy.height / 2.0, bex, bey)
			
			do me.move_p :: \main@p_ai.move
			do shoot :: \main@p_ai.shoot
		end switch
		;行動決定
		do \main@player.play(me.move_p, shoot, me.flag_p)
	end func
	+func readfile()
		if(file@exist("4_q_table_\{me.filename}.txt"))
			var handle: file@Reader :: file@makeReader("4_q_table_\{me.filename}.txt")
			do handle.delimiter([',']) {区切り文字の設定}
			
			for i1(0, 3)
				for i2(0, 3)
					for i3(0, 3)
						for i4(0, 3)
							for i5(0, 3)
								for i6(0, 3)
									for i7(0, 3)
										for i8(0, 3)
											for i9(0, 8)
												for i10(0, 1)
													
													do @q_table[i1][i2][i3][i4][i5][i6][i7][i8][i9][i10] :: handle.readFloat()
												end for
											end for
										end for
									end for
								end for
							end for
						end for
					end for
				end for
			end for
			do handle.fin()
			do dbg@print("ファイル読み込み完了,t=\{(lib@sysTime() $ float - \main@start_time $ float) / 1000.0}秒\n")
			do \main@resulttxt :~ "ファイル読み込み完了,t=\{(lib@sysTime() $ float - \main@start_time $ float) / 1000.0}秒\n"
		end if
	end func
	+func writefile()
		var learncount: int
		var alllearn: int
		for i1(0, 3)
			for i2(0, 3)
				for i3(0, 3)
					for i4(0, 3)
						for i5(0, 3)
							for i6(0, 3)
								for i7(0, 3)
									for i8(0, 3)
										for i9(0, 8)
											for i10(0, 1)
												
												if(@q_table[i1][i2][i3][i4][i5][i6][i7][i8][i9][i10] <> 0.0)
													do learncount :+ 1
												end if
												do alllearn :+ 1
											end for
										end for
									end for
								end for
							end for
						end for
					end for
				end for
			end for
		end for
		var handle: file@Writer :: file@makeWriter("4_log.txt", false)
		do handle.writeStr(\main@resulttxt) {文字列を書き込む}
		do handle.writeStr("\nQ tableの要素数\{alllearn}個中、\{learncount}個だけ学習しているため、学習率は\{learncount $ float / alllearn $ float * 100.0}%です。\n")
		do handle.fin()
		do file@delFile("4_now_data.txt")
		
	end func
end class
